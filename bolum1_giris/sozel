Javascript 

1) JS Nedir ? 
	- Yuksek-seviyeli, Nesne-Yonelimli, Yorumlayici-tabanli ve dinamik bir programlama dilidir.
	- Yuksek Seviye : Hafiza yonetimi gibi karmasik gorevleri dusunmemize gerek yoktur.
	- Nesne Yonelimli (OOP) : Nesne ozelliklerinin (katilim, cok sekillilik vb.) kullanilmasina
     imkan saglamaktadir.
	- Yorumlayici : Derleyicide old. gibi tum komutlarin bir kerede 
     makine koduna cevirmek yerine tek-tek alinip makine koduna cevrilip calistirilmasini saglar.
     Her bir satiri sirasiyla okur calistirir. Yani 4. satirda hata varsa 
     once 1,2,3'u okunacak daha sonra 4. satir calisip hata verecek. CTE vermez cunku goremez sadece RTE verir. 
     Hata ayiklama acisindan zordur. Guvenlik, web tabanli sistemler icin uygundur.
	- JS, front-end (kullanici-yuzu) gelistirmede en yaygin kullanilan dillerden birisidir.
	- Front-end Tasarim icin ; "React", "Angular" ve "Vue" gibi JS kutuphaneleri ile interaktif
     kullanici-yuzu tasarimda kullanilir.
	- Back-end Tasarim icin ; "NodeJS" kutuphanesi ile sunucu yuzunde web uygulamasi gelistirmede kullanilir.

	- Kutuphane, sadece kaynak kod icerir. Bootstrap, React, Vue birer kutuphanedir.
	- Framework, icerisinde sadece kaynak kodlar degil bir suru tool barindirir.
     Icerisinde kutuphaneler olabilir.

	- MEAN : MongoDB, Express.js, Angular, Node.js
	- MERN : MongoDB, Express.js, React, Node.js 
	- MEAN ya da MERN'den birini bilen birisi Full-Stack calisabiliyor.

	- Mobil Tasarim ; React Native ve Ionic gibi kutuphaneler ile IOS ve 
     Android icin mobil uygulama gelistirmede.
	- Masaustu Tasarim ; Electron kutuphanesi ile Masaustu PC'ler
     MACOS, Windows, Linux icin uygulama gelistirmede.  

2) JS Veri Tipleri
    - Degiskenler 2 ana kategoride inceleybiliriz.
    1) Nesne
    2) Ilkel Veri Tipleri
        a) Number : Tamsayi ve virgullu sayilar
        b) String : Karakter ve yazilar
        c) Boolean : Mantiksal ifadeler (T,F)
        d) Undefined : Deger atanmadigi icin tipi belirsiz olan degiskenler
        e) Null : Deger atanmamis degiskenler
        f) Symbol : Benzersiz deger saklayan degiskenler (Hash vb.) (ES2015)
        g) BigInt : Cok buyuk sayilar (ES2020)

    - Onemli : JS, "dinamik" bir dildir. Degiskene atanan deger gore tip otomatik secilir 
    ve herhangi bir zamanda degistirilebilir.

    - JS'te degisken tanimlamak icin 3 adet anahtar kelime bulunmaktadir.
        1) var
        2) const
        3) let  (Bunlar veri tipi degildir sadece degisken tanimlamak icin kullanilir.)
    Tanimlama : AnahtarKelime degiskenIsmi = baslangicDegeri;
    ornek olarak ; const pi = 3.14;   var sayac = 1;    let yas = 33;

     a) Const :
          - Sadece baslangic atamasi ile deger atanabilen sonrasinda degeri degistirilemeten degisken tanimlamasidir.
          - Baslangic degeri olmazsa hata verir.
          - Javadaki FINAL tanimlamasina benzer (Read-Only)
          - Sadece tanimlandigi blok icerisinde gecerlidir. Diger yerlerden erisilemez.(Block-Scoped)
          - Avantaji, tanimlama disinda deger degistirilemedigi icin guvenlidir. Hata ile deger atilamaz.
          - Dezavantaji, degeri tekrar tekrar degisecek verileri saklamak icin kullanilamaz.
          - Eger mumkumse yani bir degiskenin degeri bir daha degismeyecekse guvenlik icin const kullanmakta fayda var.
          - ISTISNA oldugu yer "Non-Primitive"lerdir. Non-Primitive bir deger kullaniyorsak (Arrays,Objects...) 
          o zaman const degeri degistirebiliyoruz.  

     b) Let :
          - Const'dan farki, istenildigi zaman degerinin degistirilebilmesidir.
          - Const gibi tanimlandigi block icerisinde gecerlidir. Baska yerlerden erisilemez.(Block-Scoped)
          - Bir degisken ayni isimle tekrar tanimlanamaz.
          - Const kullanamadigimiz durumlarda (degiskenin degeri degisecekse) let kullanmaliyiz.

     c) Var :
          - Var deyimi ile tanimlanan degiskene, let'de old. gibi tekrardan deger atamak mumkundur.
          - Var'in let'ten farki, global-scope veya fonksiyon-scope (block-scope) olmasidir.
          - Eger bir fonksiyon icerisinde tanimlandiysa sadece o fonksiyonda gecerlidir.(fonksiyon-scope = block-scope)
          - Fonksiyon disinda tanimlandiysa her yerde gecerlidir.(global-scope)
          - Var ile ayni isimle tekrar degisken tanimlamak mumkundur.
          - Gumuzde programcilar global degisken gerekmedikce var ile degisken tanimlamamayi secmektedir.

3) Operatorler :
     a) Aritmetik Operatorler
     b) Karsilastirma Operatorleri
     c) Mantiksal Operatorler
     d) Atama Operatorleri
     e) Kosul (Ternary) Operatorleri 

     + Toplama islemi ve String'lerde birlestirme islemini gerceklestirir.
     - Cikarma islemini gerceklestirir.    
     * Carpma islemini gerceklestirir.
     % Mod alma islemini gerceklestirir.  
     ++ Bir arttirma islemini gerceklestirir.
     -- Bir azaltma islemini gerceklestirir.
     ** Us alma islemini gerceklestirir.